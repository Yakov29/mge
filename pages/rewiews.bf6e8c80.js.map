{"mappings":"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","sources":["<anon>","src/js/reviews/reviewsSystem.js"],"sourcesContent":["var $53424a4ad8fe4f88$exports = {};\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const reviewsContainer = document.getElementById(\"reviews-container\");\n    const reviewForm = document.getElementById(\"review-form\");\n    const reviewNameInput = document.getElementById(\"review-name\");\n    const reviewTextInput = document.getElementById(\"review-text\");\n    const reviewRatingContainer = document.getElementById(\"review-rating\");\n    const submitButton = document.querySelector(\"button[type='submit']\");\n    const userProfile = JSON.parse(localStorage.getItem(\"userProfile\")) || {};\n    let selectedRating = 0;\n    const getReviews = async ()=>{\n        try {\n            const response = await fetch(\"https://669b6b40276e45187d3569df.mockapi.io/reviews\");\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const reviews = await response.json();\n            reviewsContainer.innerHTML = reviews.map((review)=>`\n                <div class=\"review\">\n                    <div class=\"review__content\">\n                        <p class=\"review__name\">${review.name}</p>\n                        <p class=\"review__text\">${review.text}</p>\n                        <p class=\"review__rating\">\\u{420}\\u{435}\\u{439}\\u{442}\\u{438}\\u{43D}\\u{433}: ${\"\\u2605\".repeat(review.rating)}</p>\n                        ${userProfile.admin ? `<button class=\"delete-review\" data-id=\"${review.id}\"></button>` : \"\"}\n                    </div>\n                </div>\n            `).join(\"\");\n            if (userProfile.admin) addDeleteEventListeners();\n        } catch (error) {\n            console.error(\"Failed to fetch reviews:\", error);\n        }\n    };\n    const addReview = async (name, text, rating)=>{\n        try {\n            const response = await fetch(\"https://669b6b40276e45187d3569df.mockapi.io/reviews\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    name: name,\n                    text: text,\n                    rating: rating\n                })\n            });\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            getReviews();\n        } catch (error) {\n            console.error(\"Failed to add review:\", error);\n        }\n    };\n    const userHasReviewed = async (name)=>{\n        try {\n            const response = await fetch(\"https://669b6b40276e45187d3569df.mockapi.io/reviews\");\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const reviews = await response.json();\n            return reviews.some((review)=>review.name === name);\n        } catch (error) {\n            console.error(\"Failed to check user reviews:\", error);\n            return false;\n        }\n    };\n    const updateStarRating = (rating)=>{\n        const stars = document.querySelectorAll(\".star\");\n        stars.forEach((star)=>{\n            star.classList.toggle(\"selected\", star.dataset.value <= rating);\n        });\n    };\n    const addDeleteEventListeners = ()=>{\n        const deleteButtons = document.querySelectorAll(\".delete-review\");\n        deleteButtons.forEach((button)=>{\n            button.addEventListener(\"click\", async ()=>{\n                const reviewId = button.dataset.id;\n                try {\n                    const response = await fetch(`https://669b6b40276e45187d3569df.mockapi.io/reviews/${reviewId}`, {\n                        method: \"DELETE\"\n                    });\n                    if (!response.ok) throw new Error(\"Network response was not ok\");\n                    getReviews();\n                } catch (error) {\n                    console.error(\"Failed to delete review:\", error);\n                }\n            });\n        });\n    };\n    reviewRatingContainer.addEventListener(\"click\", (e)=>{\n        if (e.target.classList.contains(\"star\")) {\n            selectedRating = parseInt(e.target.dataset.value, 10);\n            updateStarRating(selectedRating);\n        }\n    });\n    const updateFormState = ()=>{\n        if (userProfile.name) {\n            reviewNameInput.value = userProfile.name;\n            reviewNameInput.readOnly = true;\n            reviewTextInput.disabled = false;\n            submitButton.disabled = false;\n        } else {\n            reviewNameInput.value = \"\";\n            reviewNameInput.readOnly = true;\n            reviewTextInput.disabled = true;\n            submitButton.disabled = true;\n        }\n    };\n    reviewForm.addEventListener(\"submit\", async (e)=>{\n        e.preventDefault();\n        const name = reviewNameInput.value;\n        const text = reviewTextInput.value;\n        if (name && text && selectedRating > 0) {\n            if (await userHasReviewed(name)) alert(\"\\u0412\\u0438 \\u0432\\u0436\\u0435 \\u0437\\u0430\\u043B\\u0438\\u0448\\u0430\\u043B\\u0438 \\u0432\\u0456\\u0434\\u0433\\u0443\\u043A.\");\n            else {\n                addReview(name, text, selectedRating);\n                reviewTextInput.value = \"\";\n                selectedRating = 0;\n                updateStarRating(selectedRating);\n            }\n        }\n    });\n    getReviews();\n    updateFormState();\n});\n\n\n//# sourceMappingURL=rewiews.bf6e8c80.js.map\n","document.addEventListener(\"DOMContentLoaded\", () => {\n    const reviewsContainer = document.getElementById(\"reviews-container\");\n    const reviewForm = document.getElementById(\"review-form\");\n    const reviewNameInput = document.getElementById(\"review-name\");\n    const reviewTextInput = document.getElementById(\"review-text\");\n    const reviewRatingContainer = document.getElementById(\"review-rating\");\n    const submitButton = document.querySelector(\"button[type='submit']\");\n    const userProfile = JSON.parse(localStorage.getItem(\"userProfile\")) || {};\n\n    let selectedRating = 0;\n\n    const getReviews = async () => {\n        try {\n            const response = await fetch(\"https://669b6b40276e45187d3569df.mockapi.io/reviews\");\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const reviews = await response.json();\n            reviewsContainer.innerHTML = reviews.map(review => `\n                <div class=\"review\">\n                    <div class=\"review__content\">\n                        <p class=\"review__name\">${review.name}</p>\n                        <p class=\"review__text\">${review.text}</p>\n                        <p class=\"review__rating\">Рейтинг: ${\"★\".repeat(review.rating)}</p>\n                        ${userProfile.admin ? `<button class=\"delete-review\" data-id=\"${review.id}\"></button>` : ''}\n                    </div>\n                </div>\n            `).join('');\n            if (userProfile.admin) {\n                addDeleteEventListeners();\n            }\n        } catch (error) {\n            console.error(\"Failed to fetch reviews:\", error);\n        }\n    };\n\n    const addReview = async (name, text, rating) => {\n        try {\n            const response = await fetch(\"https://669b6b40276e45187d3569df.mockapi.io/reviews\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({ name, text, rating })\n            });\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            getReviews();\n        } catch (error) {\n            console.error(\"Failed to add review:\", error);\n        }\n    };\n\n    const userHasReviewed = async (name) => {\n        try {\n            const response = await fetch(\"https://669b6b40276e45187d3569df.mockapi.io/reviews\");\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const reviews = await response.json();\n            return reviews.some(review => review.name === name);\n        } catch (error) {\n            console.error(\"Failed to check user reviews:\", error);\n            return false;\n        }\n    };\n\n    const updateStarRating = (rating) => {\n        const stars = document.querySelectorAll('.star');\n        stars.forEach(star => {\n            star.classList.toggle('selected', star.dataset.value <= rating);\n        });\n    };\n\n    const addDeleteEventListeners = () => {\n        const deleteButtons = document.querySelectorAll(\".delete-review\");\n        deleteButtons.forEach(button => {\n            button.addEventListener(\"click\", async () => {\n                const reviewId = button.dataset.id;\n                try {\n                    const response = await fetch(`https://669b6b40276e45187d3569df.mockapi.io/reviews/${reviewId}`, {\n                        method: \"DELETE\"\n                    });\n                    if (!response.ok) throw new Error(\"Network response was not ok\");\n                    getReviews();\n                } catch (error) {\n                    console.error(\"Failed to delete review:\", error);\n                }\n            });\n        });\n    };\n\n    reviewRatingContainer.addEventListener(\"click\", (e) => {\n        if (e.target.classList.contains('star')) {\n            selectedRating = parseInt(e.target.dataset.value, 10);\n            updateStarRating(selectedRating);\n        }\n    });\n\n    const updateFormState = () => {\n        if (userProfile.name) {\n            reviewNameInput.value = userProfile.name;\n            reviewNameInput.readOnly = true;\n            reviewTextInput.disabled = false;\n            submitButton.disabled = false;\n        } else {\n            reviewNameInput.value = '';\n            reviewNameInput.readOnly = true;\n            reviewTextInput.disabled = true;\n            submitButton.disabled = true;\n        }\n    };\n\n    reviewForm.addEventListener(\"submit\", async (e) => {\n        e.preventDefault();\n        const name = reviewNameInput.value;\n        const text = reviewTextInput.value;\n\n        if (name && text && selectedRating > 0) {\n            if (await userHasReviewed(name)) {\n                alert(\"Ви вже залишали відгук.\");\n            } else {\n                addReview(name, text, selectedRating);\n                reviewTextInput.value = '';\n                selectedRating = 0;\n                updateStarRating(selectedRating);\n            }\n        }\n    });\n\n    getReviews();\n    updateFormState();\n});\n"],"names":["document","addEventListener","reviewsContainer","getElementById","reviewForm","reviewNameInput","reviewTextInput","reviewRatingContainer","submitButton","querySelector","userProfile","JSON","parse","localStorage","getItem","selectedRating","getReviews","response","fetch","ok","Error","reviews","json","innerHTML","map","review","name","text","repeat","rating","admin","id","join","addDeleteEventListeners","error","console","addReview","method","headers","body","stringify","userHasReviewed","some","updateStarRating","stars","querySelectorAll","forEach","star","classList","toggle","dataset","value","deleteButtons","button","reviewId","e","target","contains","parseInt","preventDefault","alert","readOnly","disabled"],"version":3,"file":"rewiews.bf6e8c80.js.map"}