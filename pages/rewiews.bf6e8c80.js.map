{"mappings":"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","sources":["<anon>","src/js/reviews/reviewsSystem.js"],"sourcesContent":["var $53424a4ad8fe4f88$exports = {};\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const reviewsContainer = document.getElementById(\"reviews-container\");\n    const reviewForm = document.getElementById(\"review-form\");\n    const reviewNameInput = document.getElementById(\"review-name\");\n    const reviewTextInput = document.getElementById(\"review-text\");\n    const reviewRatingContainer = document.getElementById(\"review-rating\");\n    const submitButton = document.querySelector(\"button[type='submit']\");\n    const userProfile = JSON.parse(localStorage.getItem(\"userProfile\")) || {};\n    let selectedRating = 0;\n    const getReviews = async ()=>{\n        try {\n            const response = await fetch(\"https://669b6b40276e45187d3569df.mockapi.io/reviews\");\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const reviews = await response.json();\n            reviewsContainer.innerHTML = reviews.map((review)=>`\r\n                <div class=\"review\">\r\n                    <div class=\"review__content\">\r\n                        <p class=\"review__name\">${review.name}</p>\r\n                        <p class=\"review__text\">${review.text}</p>\r\n                        <p class=\"review__rating\">\\u{420}\\u{435}\\u{439}\\u{442}\\u{438}\\u{43D}\\u{433}: ${\"\\u2605\".repeat(review.rating)}</p>\r\n                        ${userProfile.admin ? `<button class=\"delete-review\" data-id=\"${review.id}\"></button>` : \"\"}\r\n                    </div>\r\n                </div>\r\n            `).join(\"\");\n            if (userProfile.admin) addDeleteEventListeners();\n        } catch (error) {\n            console.error(\"Failed to fetch reviews:\", error);\n        }\n    };\n    const addReview = async (name, text, rating)=>{\n        try {\n            const response = await fetch(\"https://669b6b40276e45187d3569df.mockapi.io/reviews\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    name: name,\n                    text: text,\n                    rating: rating\n                })\n            });\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            getReviews();\n        } catch (error) {\n            console.error(\"Failed to add review:\", error);\n        }\n    };\n    const userHasReviewed = async (name)=>{\n        try {\n            const response = await fetch(\"https://669b6b40276e45187d3569df.mockapi.io/reviews\");\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const reviews = await response.json();\n            return reviews.some((review)=>review.name === name);\n        } catch (error) {\n            console.error(\"Failed to check user reviews:\", error);\n            return false;\n        }\n    };\n    const updateStarRating = (rating)=>{\n        const stars = document.querySelectorAll(\".star\");\n        stars.forEach((star)=>{\n            star.classList.toggle(\"selected\", star.dataset.value <= rating);\n        });\n    };\n    const addDeleteEventListeners = ()=>{\n        const deleteButtons = document.querySelectorAll(\".delete-review\");\n        deleteButtons.forEach((button)=>{\n            button.addEventListener(\"click\", async ()=>{\n                const reviewId = button.dataset.id;\n                try {\n                    const response = await fetch(`https://669b6b40276e45187d3569df.mockapi.io/reviews/${reviewId}`, {\n                        method: \"DELETE\"\n                    });\n                    if (!response.ok) throw new Error(\"Network response was not ok\");\n                    getReviews();\n                } catch (error) {\n                    console.error(\"Failed to delete review:\", error);\n                }\n            });\n        });\n    };\n    reviewRatingContainer.addEventListener(\"click\", (e)=>{\n        if (e.target.classList.contains(\"star\")) {\n            selectedRating = parseInt(e.target.dataset.value, 10);\n            updateStarRating(selectedRating);\n        }\n    });\n    const updateFormState = ()=>{\n        if (userProfile.name) {\n            reviewNameInput.value = userProfile.name;\n            reviewNameInput.readOnly = true;\n            reviewTextInput.disabled = false;\n            submitButton.disabled = false;\n        } else {\n            reviewNameInput.value = \"\";\n            reviewNameInput.readOnly = true;\n            reviewTextInput.disabled = true;\n            submitButton.disabled = true;\n        }\n    };\n    reviewForm.addEventListener(\"submit\", async (e)=>{\n        e.preventDefault();\n        const name = reviewNameInput.value;\n        const text = reviewTextInput.value;\n        if (name && text && selectedRating > 0) {\n            if (await userHasReviewed(name)) alert(\"\\u0412\\u0438 \\u0432\\u0436\\u0435 \\u0437\\u0430\\u043B\\u0438\\u0448\\u0430\\u043B\\u0438 \\u0432\\u0456\\u0434\\u0433\\u0443\\u043A.\");\n            else {\n                addReview(name, text, selectedRating);\n                reviewTextInput.value = \"\";\n                selectedRating = 0;\n                updateStarRating(selectedRating);\n            }\n        }\n    });\n    getReviews();\n    updateFormState();\n});\n\n\n//# sourceMappingURL=rewiews.bf6e8c80.js.map\n","document.addEventListener(\"DOMContentLoaded\", () => {\r\n  const reviewsContainer = document.getElementById(\"reviews-container\");\r\n  const reviewForm = document.getElementById(\"review-form\");\r\n  const reviewNameInput = document.getElementById(\"review-name\");\r\n  const reviewTextInput = document.getElementById(\"review-text\");\r\n  const reviewRatingContainer = document.getElementById(\"review-rating\");\r\n  const submitButton = document.querySelector(\"button[type='submit']\");\r\n  const userProfile = JSON.parse(localStorage.getItem(\"userProfile\")) || {};\r\n\r\n  let selectedRating = 0;\r\n\r\n  const getReviews = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://669b6b40276e45187d3569df.mockapi.io/reviews\"\r\n      );\r\n      if (!response.ok) throw new Error(\"Network response was not ok\");\r\n      const reviews = await response.json();\r\n      reviewsContainer.innerHTML = reviews\r\n        .map(\r\n          (review) => `\r\n                <div class=\"review\">\r\n                    <div class=\"review__content\">\r\n                        <p class=\"review__name\">${review.name}</p>\r\n                        <p class=\"review__text\">${review.text}</p>\r\n                        <p class=\"review__rating\">Рейтинг: ${\"★\".repeat(\r\n                          review.rating\r\n                        )}</p>\r\n                        ${\r\n                          userProfile.admin\r\n                            ? `<button class=\"delete-review\" data-id=\"${review.id}\"></button>`\r\n                            : \"\"\r\n                        }\r\n                    </div>\r\n                </div>\r\n            `\r\n        )\r\n        .join(\"\");\r\n      if (userProfile.admin) {\r\n        addDeleteEventListeners();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch reviews:\", error);\r\n    }\r\n  };\r\n\r\n  const addReview = async (name, text, rating) => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://669b6b40276e45187d3569df.mockapi.io/reviews\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ name, text, rating }),\r\n        }\r\n      );\r\n      if (!response.ok) throw new Error(\"Network response was not ok\");\r\n      getReviews();\r\n    } catch (error) {\r\n      console.error(\"Failed to add review:\", error);\r\n    }\r\n  };\r\n\r\n  const userHasReviewed = async (name) => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://669b6b40276e45187d3569df.mockapi.io/reviews\"\r\n      );\r\n      if (!response.ok) throw new Error(\"Network response was not ok\");\r\n      const reviews = await response.json();\r\n      return reviews.some((review) => review.name === name);\r\n    } catch (error) {\r\n      console.error(\"Failed to check user reviews:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const updateStarRating = (rating) => {\r\n    const stars = document.querySelectorAll(\".star\");\r\n    stars.forEach((star) => {\r\n      star.classList.toggle(\"selected\", star.dataset.value <= rating);\r\n    });\r\n  };\r\n\r\n  const addDeleteEventListeners = () => {\r\n    const deleteButtons = document.querySelectorAll(\".delete-review\");\r\n    deleteButtons.forEach((button) => {\r\n      button.addEventListener(\"click\", async () => {\r\n        const reviewId = button.dataset.id;\r\n        try {\r\n          const response = await fetch(\r\n            `https://669b6b40276e45187d3569df.mockapi.io/reviews/${reviewId}`,\r\n            {\r\n              method: \"DELETE\",\r\n            }\r\n          );\r\n          if (!response.ok) throw new Error(\"Network response was not ok\");\r\n          getReviews();\r\n        } catch (error) {\r\n          console.error(\"Failed to delete review:\", error);\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  reviewRatingContainer.addEventListener(\"click\", (e) => {\r\n    if (e.target.classList.contains(\"star\")) {\r\n      selectedRating = parseInt(e.target.dataset.value, 10);\r\n      updateStarRating(selectedRating);\r\n    }\r\n  });\r\n\r\n  const updateFormState = () => {\r\n    if (userProfile.name) {\r\n      reviewNameInput.value = userProfile.name;\r\n      reviewNameInput.readOnly = true;\r\n      reviewTextInput.disabled = false;\r\n      submitButton.disabled = false;\r\n    } else {\r\n      reviewNameInput.value = \"\";\r\n      reviewNameInput.readOnly = true;\r\n      reviewTextInput.disabled = true;\r\n      submitButton.disabled = true;\r\n    }\r\n  };\r\n\r\n  reviewForm.addEventListener(\"submit\", async (e) => {\r\n    e.preventDefault();\r\n    const name = reviewNameInput.value;\r\n    const text = reviewTextInput.value;\r\n\r\n    if (name && text && selectedRating > 0) {\r\n      if (await userHasReviewed(name)) {\r\n        alert(\"Ви вже залишали відгук.\");\r\n      } else {\r\n        addReview(name, text, selectedRating);\r\n        reviewTextInput.value = \"\";\r\n        selectedRating = 0;\r\n        updateStarRating(selectedRating);\r\n      }\r\n    }\r\n  });\r\n\r\n  getReviews();\r\n  updateFormState();\r\n});\r\n"],"names":["document","addEventListener","reviewsContainer","getElementById","reviewForm","reviewNameInput","reviewTextInput","reviewRatingContainer","submitButton","querySelector","userProfile","JSON","parse","localStorage","getItem","selectedRating","getReviews","response","fetch","ok","Error","reviews","json","innerHTML","map","review","name","text","repeat","rating","admin","id","join","addDeleteEventListeners","error","console","addReview","method","headers","body","stringify","userHasReviewed","some","updateStarRating","stars","querySelectorAll","forEach","star","classList","toggle","dataset","value","deleteButtons","button","reviewId","e","target","contains","parseInt","preventDefault","alert","readOnly","disabled"],"version":3,"file":"rewiews.bf6e8c80.js.map"}