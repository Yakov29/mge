{"mappings":"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","sources":["<anon>","src/js/reviews/reviewsSystem.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirecf3a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirecf3a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"79buJ\", function(module, exports) {\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const reviewsContainer = document.getElementById(\"reviews-container\");\n    const reviewForm = document.getElementById(\"review-form\");\n    const reviewNameInput = document.getElementById(\"review-name\");\n    const reviewTextInput = document.getElementById(\"review-text\");\n    const reviewRatingContainer = document.getElementById(\"review-rating\");\n    const submitButton = document.getElementById(\"submit-button\");\n    const userProfile = JSON.parse(localStorage.getItem(\"userProfile\")) || {};\n    let selectedRating = 0;\n    const getReviews = async ()=>{\n        try {\n            const response = await fetch(\"https://669b6b40276e45187d3569df.mockapi.io/reviews\");\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const reviews = await response.json();\n            reviewsContainer.innerHTML = reviews.map((review)=>`\r\n                <div class=\"review\">\r\n                    <div class=\"review__avatar\">${review.name[0].toUpperCase()}</div>\r\n                    <div class=\"review__content\">\r\n                        <p class=\"review__name\">${review.name}</p>\r\n                        <p class=\"review__text\">${review.text}</p>\r\n                        <p class=\"review__rating\">\\u{420}\\u{435}\\u{439}\\u{442}\\u{438}\\u{43D}\\u{433}: ${\"\\u2605\".repeat(review.rating)}</p>\r\n                    </div>\r\n                </div>\r\n            `).join(\"\");\n        } catch (error) {\n            console.error(\"Failed to fetch reviews:\", error);\n        }\n    };\n    const addReview = async (name, text, rating)=>{\n        try {\n            const response = await fetch(\"https://669b6b40276e45187d3569df.mockapi.io/reviews\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    name: name,\n                    text: text,\n                    rating: rating\n                })\n            });\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            getReviews(); // Refresh the reviews list\n        } catch (error) {\n            console.error(\"Failed to add review:\", error);\n        }\n    };\n    const userHasReviewed = async (name)=>{\n        try {\n            const response = await fetch(\"https://669b6b40276e45187d3569df.mockapi.io/reviews\");\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const reviews = await response.json();\n            return reviews.some((review)=>review.name === name);\n        } catch (error) {\n            console.error(\"Failed to check user reviews:\", error);\n            return false;\n        }\n    };\n    const updateStarRating = (rating)=>{\n        const stars = document.querySelectorAll(\".star\");\n        stars.forEach((star)=>{\n            star.classList.toggle(\"selected\", star.dataset.value <= rating);\n        });\n    };\n    reviewRatingContainer.addEventListener(\"click\", (e)=>{\n        if (e.target.classList.contains(\"star\")) {\n            selectedRating = parseInt(e.target.dataset.value, 10);\n            updateStarRating(selectedRating);\n        }\n    });\n    const updateFormState = ()=>{\n        if (userProfile.name) {\n            reviewNameInput.value = userProfile.name;\n            reviewNameInput.readOnly = true;\n            reviewTextInput.disabled = false;\n            submitButton.disabled = false;\n        } else {\n            reviewNameInput.value = \"\";\n            reviewNameInput.readOnly = true;\n            reviewTextInput.disabled = true;\n            submitButton.disabled = true;\n        }\n    };\n    reviewForm.addEventListener(\"submit\", async (e)=>{\n        e.preventDefault();\n        const name = reviewNameInput.value;\n        const text = reviewTextInput.value;\n        if (name && text && selectedRating > 0) {\n            if (await userHasReviewed(name)) alert(\"\\u0412\\u0438 \\u0432\\u0436\\u0435 \\u0437\\u0430\\u043B\\u0438\\u0448\\u0430\\u043B\\u0438 \\u0432\\u0456\\u0434\\u0433\\u0443\\u043A.\");\n            else {\n                addReview(name, text, selectedRating);\n                reviewTextInput.value = \"\";\n                selectedRating = 0;\n                updateStarRating(selectedRating);\n            }\n        }\n    });\n    getReviews();\n    updateFormState();\n});\n\n});\n\n\nparcelRequire(\"79buJ\");\n\n//# sourceMappingURL=rewiews.5503519c.js.map\n","document.addEventListener(\"DOMContentLoaded\", () => {\r\n    const reviewsContainer = document.getElementById(\"reviews-container\");\r\n    const reviewForm = document.getElementById(\"review-form\");\r\n    const reviewNameInput = document.getElementById(\"review-name\");\r\n    const reviewTextInput = document.getElementById(\"review-text\");\r\n    const reviewRatingContainer = document.getElementById(\"review-rating\");\r\n    const submitButton = document.getElementById(\"submit-button\");\r\n    const userProfile = JSON.parse(localStorage.getItem(\"userProfile\")) || {};\r\n\r\n    let selectedRating = 0;\r\n\r\n    const getReviews = async () => {\r\n        try {\r\n            const response = await fetch(\"https://669b6b40276e45187d3569df.mockapi.io/reviews\");\r\n            if (!response.ok) throw new Error(\"Network response was not ok\");\r\n            const reviews = await response.json();\r\n            reviewsContainer.innerHTML = reviews.map(review => `\r\n                <div class=\"review\">\r\n                    <div class=\"review__avatar\">${review.name[0].toUpperCase()}</div>\r\n                    <div class=\"review__content\">\r\n                        <p class=\"review__name\">${review.name}</p>\r\n                        <p class=\"review__text\">${review.text}</p>\r\n                        <p class=\"review__rating\">Рейтинг: ${\"★\".repeat(review.rating)}</p>\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch reviews:\", error);\r\n        }\r\n    };\r\n\r\n    const addReview = async (name, text, rating) => {\r\n        try {\r\n            const response = await fetch(\"https://669b6b40276e45187d3569df.mockapi.io/reviews\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({ name, text, rating })\r\n            });\r\n            if (!response.ok) throw new Error(\"Network response was not ok\");\r\n            getReviews(); // Refresh the reviews list\r\n        } catch (error) {\r\n            console.error(\"Failed to add review:\", error);\r\n        }\r\n    };\r\n\r\n    const userHasReviewed = async (name) => {\r\n        try {\r\n            const response = await fetch(\"https://669b6b40276e45187d3569df.mockapi.io/reviews\");\r\n            if (!response.ok) throw new Error(\"Network response was not ok\");\r\n            const reviews = await response.json();\r\n            return reviews.some(review => review.name === name);\r\n        } catch (error) {\r\n            console.error(\"Failed to check user reviews:\", error);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const updateStarRating = (rating) => {\r\n        const stars = document.querySelectorAll('.star');\r\n        stars.forEach(star => {\r\n            star.classList.toggle('selected', star.dataset.value <= rating);\r\n        });\r\n    };\r\n\r\n    reviewRatingContainer.addEventListener(\"click\", (e) => {\r\n        if (e.target.classList.contains('star')) {\r\n            selectedRating = parseInt(e.target.dataset.value, 10);\r\n            updateStarRating(selectedRating);\r\n        }\r\n    });\r\n\r\n    const updateFormState = () => {\r\n        if (userProfile.name) {\r\n            reviewNameInput.value = userProfile.name;\r\n            reviewNameInput.readOnly = true;\r\n            reviewTextInput.disabled = false;\r\n            submitButton.disabled = false;\r\n        } else {\r\n            reviewNameInput.value = '';\r\n            reviewNameInput.readOnly = true;\r\n            reviewTextInput.disabled = true;\r\n            submitButton.disabled = true;\r\n        }\r\n    };\r\n\r\n    reviewForm.addEventListener(\"submit\", async (e) => {\r\n        e.preventDefault();\r\n        const name = reviewNameInput.value;\r\n        const text = reviewTextInput.value;\r\n\r\n        if (name && text && selectedRating > 0) {\r\n            if (await userHasReviewed(name)) {\r\n                alert(\"Ви вже залишали відгук.\");\r\n            } else {\r\n                addReview(name, text, selectedRating);\r\n                reviewTextInput.value = '';\r\n                selectedRating = 0;\r\n                updateStarRating(selectedRating);\r\n            }\r\n        }\r\n    });\r\n\r\n    getReviews();\r\n    updateFormState();\r\n});\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","document","addEventListener","reviewsContainer","getElementById","reviewForm","reviewNameInput","reviewTextInput","reviewRatingContainer","submitButton","userProfile","JSON","parse","localStorage","getItem","selectedRating","getReviews","response","fetch","ok","reviews","json","innerHTML","map","review","name","toUpperCase","text","repeat","rating","join","error","console","addReview","method","headers","body","stringify","userHasReviewed","some","updateStarRating","stars","querySelectorAll","forEach","star","classList","toggle","dataset","value","e","target","contains","parseInt","preventDefault","alert","readOnly","disabled"],"version":3,"file":"rewiews.5503519c.js.map"}