{"mappings":"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","sources":["<anon>","src/js/settings.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirecf3a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirecf3a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"6byIg\", function(module, exports) {\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const profileButton = document.querySelector(\"#profileCircle\");\n    const profileModal = document.querySelector(\"#profileModal\");\n    const notificationsModal = document.querySelector(\"#notificationsModal\");\n    const closeProfileModalButton = document.querySelector(\"#closeProfileModal\");\n    const closeNotificationsModalButton = document.querySelector(\"#closeNotificationsModal\");\n    const notificationsButton = document.querySelector(\"#notificationsButton\");\n    const settingsForm = document.querySelector(\"#settingsForm\");\n    const profileName = document.querySelector(\"#profileName\");\n    const notificationForm = document.querySelector(\"#notificationForm\");\n    const notificationsList = document.querySelector(\"#notificationsList\");\n    const handleNotificationSubmit = async (e)=>{\n        e.preventDefault();\n        const message = document.querySelector(\"#notificationMessage\").value;\n        const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n        const login = userProfile ? userProfile.login : null;\n        if (!login) {\n            console.error(\"User login is not available.\");\n            return;\n        }\n        try {\n            const response = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const users = await response.json();\n            const user = users[0];\n            const updatedNotifications = Array.isArray(user.notifications) ? [\n                ...user.notifications,\n                message\n            ] : [\n                message\n            ];\n            const updateResponse = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts/${user.id}`, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    ...user,\n                    notifications: updatedNotifications\n                })\n            });\n            if (!updateResponse.ok) throw new Error(\"Network response was not ok\");\n            await fetchNotifications();\n            if (notificationForm) notificationForm.reset();\n        } catch (error) {\n            console.error(\"Sending notification failed:\", error);\n        }\n    };\n    const fetchNotifications = async ()=>{\n        const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n        const login = userProfile ? userProfile.login : null;\n        if (!login) {\n            console.error(\"User login is not available.\");\n            return;\n        }\n        try {\n            const response = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`);\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const users = await response.json();\n            const notifications = users[0]?.notifications || [];\n            if (notificationsList) notificationsList.innerHTML = notifications.map((notification, index)=>`<div class=\"notification-item\">\r\n                        <p>${notification}</p>\r\n                        <button data-index=\"${index}\" class=\"delete-notification\">&times;</button>\r\n                    </div>`).join(\"\");\n            addDeleteEventListeners();\n        } catch (error) {\n            console.error(\"Fetching notifications failed:\", error);\n        }\n    };\n    const addDeleteEventListeners = ()=>{\n        const deleteButtons = document.querySelectorAll(\".delete-notification\");\n        deleteButtons.forEach((button)=>{\n            button.addEventListener(\"click\", async ()=>{\n                const index = button.dataset.index;\n                const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n                const login = userProfile ? userProfile.login : null;\n                if (!login) {\n                    console.error(\"User login is not available.\");\n                    return;\n                }\n                try {\n                    const response = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`, {\n                        method: \"GET\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        }\n                    });\n                    if (!response.ok) throw new Error(\"Network response was not ok\");\n                    const users = await response.json();\n                    const user = users[0];\n                    const updatedNotifications = user.notifications.filter((_, i)=>i !== parseInt(index, 10));\n                    const updateResponse = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts/${user.id}`, {\n                        method: \"PUT\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            ...user,\n                            notifications: updatedNotifications\n                        })\n                    });\n                    if (!updateResponse.ok) throw new Error(\"Network response was not ok\");\n                    await fetchNotifications();\n                } catch (error) {\n                    console.error(\"Deleting notification failed:\", error);\n                }\n            });\n        });\n    };\n    const handleProfileModalOpen = ()=>{\n        if (profileModal) profileModal.style.display = \"flex\";\n    };\n    const handleNotificationsModalOpen = ()=>{\n        if (notificationsModal) {\n            notificationsModal.style.display = \"flex\";\n            fetchNotifications();\n        }\n    };\n    const handleCloseProfileModal = ()=>{\n        if (profileModal) profileModal.style.display = \"none\";\n    };\n    const handleCloseNotificationsModal = ()=>{\n        if (notificationsModal) notificationsModal.style.display = \"none\";\n    };\n    const updateProfileButton = async ()=>{\n        const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n        const login = userProfile ? userProfile.login : null;\n        if (login) try {\n            const response = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`);\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const users = await response.json();\n            const user = users[0];\n            if (profileButton) {\n                profileButton.textContent = user.name[0].toUpperCase();\n                profileButton.style.display = \"flex\";\n            }\n            if (profileName) profileName.textContent = `${user.name} ${user.surname}`;\n        } catch (error) {\n            console.error(\"Fetching user profile failed:\", error);\n        }\n        else {\n            if (profileButton) profileButton.style.display = \"none\";\n            if (profileName) profileName.textContent = \"\\u0406\\u043C'\\u044F \\u043A\\u043E\\u0440\\u0438\\u0441\\u0442\\u0443\\u0432\\u0430\\u0447\\u0430\";\n        }\n    };\n    if (profileButton) profileButton.addEventListener(\"click\", handleProfileModalOpen);\n    if (closeProfileModalButton) closeProfileModalButton.addEventListener(\"click\", handleCloseProfileModal);\n    if (notificationsButton) notificationsButton.addEventListener(\"click\", handleNotificationsModalOpen);\n    if (closeNotificationsModalButton) closeNotificationsModalButton.addEventListener(\"click\", handleCloseNotificationsModal);\n    if (settingsForm) settingsForm.addEventListener(\"submit\", async (e)=>{\n        e.preventDefault();\n        const formData = new FormData(settingsForm);\n        const data = Object.fromEntries(formData.entries());\n        const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n        const login = userProfile ? userProfile.login : null;\n        if (!login) {\n            console.error(\"User login is not available.\");\n            return;\n        }\n        try {\n            const response = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`);\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const users = await response.json();\n            const user = users[0];\n            const updateResponse = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts/${user.id}`, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    ...user,\n                    ...data\n                })\n            });\n            if (!updateResponse.ok) throw new Error(\"Network response was not ok\");\n            alert(\"\\u041D\\u0430\\u043B\\u0430\\u0448\\u0442\\u0443\\u0432\\u0430\\u043D\\u043D\\u044F \\u0437\\u0431\\u0435\\u0440\\u0435\\u0436\\u0435\\u043D\\u043E\");\n            handleCloseProfileModal();\n        } catch (error) {\n            console.error(\"Updating profile failed:\", error);\n        }\n    });\n    if (notificationForm) notificationForm.addEventListener(\"submit\", handleNotificationSubmit);\n    updateProfileButton();\n});\n\n});\n\n\nparcelRequire(\"6byIg\");\n\n//# sourceMappingURL=settings.fdbc0abc.js.map\n","document.addEventListener(\"DOMContentLoaded\", () => {\r\n  const profileButton = document.querySelector(\"#profileCircle\");\r\n  const profileModal = document.querySelector(\"#profileModal\");\r\n  const notificationsModal = document.querySelector(\"#notificationsModal\");\r\n  const closeProfileModalButton = document.querySelector(\"#closeProfileModal\");\r\n  const closeNotificationsModalButton = document.querySelector(\r\n    \"#closeNotificationsModal\"\r\n  );\r\n  const notificationsButton = document.querySelector(\"#notificationsButton\");\r\n  const settingsForm = document.querySelector(\"#settingsForm\");\r\n  const profileName = document.querySelector(\"#profileName\");\r\n  const notificationForm = document.querySelector(\"#notificationForm\");\r\n  const notificationsList = document.querySelector(\"#notificationsList\");\r\n\r\n  const handleNotificationSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const message = document.querySelector(\"#notificationMessage\").value;\r\n    const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n    const login = userProfile ? userProfile.login : null;\r\n\r\n    if (!login) {\r\n      console.error(\"User login is not available.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      if (!response.ok) throw new Error(\"Network response was not ok\");\r\n      const users = await response.json();\r\n      const user = users[0];\r\n\r\n      const updatedNotifications = Array.isArray(user.notifications)\r\n        ? [...user.notifications, message]\r\n        : [message];\r\n\r\n      const updateResponse = await fetch(\r\n        `https://669a78899ba098ed61ffc5a3.mockapi.io/accounts/${user.id}`,\r\n        {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            ...user,\r\n            notifications: updatedNotifications,\r\n          }),\r\n        }\r\n      );\r\n      if (!updateResponse.ok) throw new Error(\"Network response was not ok\");\r\n\r\n      await fetchNotifications();\r\n      if (notificationForm) notificationForm.reset();\r\n    } catch (error) {\r\n      console.error(\"Sending notification failed:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchNotifications = async () => {\r\n    const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n    const login = userProfile ? userProfile.login : null;\r\n\r\n    if (!login) {\r\n      console.error(\"User login is not available.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`\r\n      );\r\n      if (!response.ok) throw new Error(\"Network response was not ok\");\r\n      const users = await response.json();\r\n      const notifications = users[0]?.notifications || [];\r\n      if (notificationsList) {\r\n        notificationsList.innerHTML = notifications\r\n          .map(\r\n            (notification, index) =>\r\n              `<div class=\"notification-item\">\r\n                        <p>${notification}</p>\r\n                        <button data-index=\"${index}\" class=\"delete-notification\">&times;</button>\r\n                    </div>`\r\n          )\r\n          .join(\"\");\r\n      }\r\n      addDeleteEventListeners();\r\n    } catch (error) {\r\n      console.error(\"Fetching notifications failed:\", error);\r\n    }\r\n  };\r\n\r\n  const addDeleteEventListeners = () => {\r\n    const deleteButtons = document.querySelectorAll(\".delete-notification\");\r\n    deleteButtons.forEach((button) => {\r\n      button.addEventListener(\"click\", async () => {\r\n        const index = button.dataset.index;\r\n        const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n        const login = userProfile ? userProfile.login : null;\r\n\r\n        if (!login) {\r\n          console.error(\"User login is not available.\");\r\n          return;\r\n        }\r\n\r\n        try {\r\n          const response = await fetch(\r\n            `https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`,\r\n            {\r\n              method: \"GET\",\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n            }\r\n          );\r\n          if (!response.ok) throw new Error(\"Network response was not ok\");\r\n          const users = await response.json();\r\n          const user = users[0];\r\n\r\n          const updatedNotifications = user.notifications.filter(\r\n            (_, i) => i !== parseInt(index, 10)\r\n          );\r\n\r\n          const updateResponse = await fetch(\r\n            `https://669a78899ba098ed61ffc5a3.mockapi.io/accounts/${user.id}`,\r\n            {\r\n              method: \"PUT\",\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n              body: JSON.stringify({\r\n                ...user,\r\n                notifications: updatedNotifications,\r\n              }),\r\n            }\r\n          );\r\n          if (!updateResponse.ok)\r\n            throw new Error(\"Network response was not ok\");\r\n\r\n          await fetchNotifications();\r\n        } catch (error) {\r\n          console.error(\"Deleting notification failed:\", error);\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const handleProfileModalOpen = () => {\r\n    if (profileModal) profileModal.style.display = \"flex\";\r\n  };\r\n\r\n  const handleNotificationsModalOpen = () => {\r\n    if (notificationsModal) {\r\n      notificationsModal.style.display = \"flex\";\r\n      fetchNotifications();\r\n    }\r\n  };\r\n\r\n  const handleCloseProfileModal = () => {\r\n    if (profileModal) profileModal.style.display = \"none\";\r\n  };\r\n\r\n  const handleCloseNotificationsModal = () => {\r\n    if (notificationsModal) notificationsModal.style.display = \"none\";\r\n  };\r\n\r\n  const updateProfileButton = async () => {\r\n    const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n    const login = userProfile ? userProfile.login : null;\r\n\r\n    if (login) {\r\n      try {\r\n        const response = await fetch(\r\n          `https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`\r\n        );\r\n        if (!response.ok) throw new Error(\"Network response was not ok\");\r\n        const users = await response.json();\r\n        const user = users[0];\r\n        if (profileButton) {\r\n          profileButton.textContent = user.name[0].toUpperCase();\r\n          profileButton.style.display = \"flex\";\r\n        }\r\n        if (profileName)\r\n          profileName.textContent = `${user.name} ${user.surname}`;\r\n      } catch (error) {\r\n        console.error(\"Fetching user profile failed:\", error);\r\n      }\r\n    } else {\r\n      if (profileButton) profileButton.style.display = \"none\";\r\n      if (profileName) profileName.textContent = \"Ім'я користувача\";\r\n    }\r\n  };\r\n\r\n  if (profileButton) {\r\n    profileButton.addEventListener(\"click\", handleProfileModalOpen);\r\n  }\r\n\r\n  if (closeProfileModalButton) {\r\n    closeProfileModalButton.addEventListener(\"click\", handleCloseProfileModal);\r\n  }\r\n\r\n  if (notificationsButton) {\r\n    notificationsButton.addEventListener(\"click\", handleNotificationsModalOpen);\r\n  }\r\n\r\n  if (closeNotificationsModalButton) {\r\n    closeNotificationsModalButton.addEventListener(\r\n      \"click\",\r\n      handleCloseNotificationsModal\r\n    );\r\n  }\r\n\r\n  if (settingsForm) {\r\n    settingsForm.addEventListener(\"submit\", async (e) => {\r\n      e.preventDefault();\r\n      const formData = new FormData(settingsForm);\r\n      const data = Object.fromEntries(formData.entries());\r\n      const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n      const login = userProfile ? userProfile.login : null;\r\n\r\n      if (!login) {\r\n        console.error(\"User login is not available.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(\r\n          `https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`\r\n        );\r\n        if (!response.ok) throw new Error(\"Network response was not ok\");\r\n        const users = await response.json();\r\n        const user = users[0];\r\n\r\n        const updateResponse = await fetch(\r\n          `https://669a78899ba098ed61ffc5a3.mockapi.io/accounts/${user.id}`,\r\n          {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              ...user,\r\n              ...data,\r\n            }),\r\n          }\r\n        );\r\n        if (!updateResponse.ok) throw new Error(\"Network response was not ok\");\r\n        alert(\"Налаштування збережено\");\r\n        handleCloseProfileModal();\r\n      } catch (error) {\r\n        console.error(\"Updating profile failed:\", error);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (notificationForm) {\r\n    notificationForm.addEventListener(\"submit\", handleNotificationSubmit);\r\n  }\r\n\r\n  updateProfileButton();\r\n});\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","document","addEventListener","profileButton","querySelector","profileModal","notificationsModal","closeProfileModalButton","closeNotificationsModalButton","notificationsButton","settingsForm","profileName","notificationForm","notificationsList","handleNotificationSubmit","e","preventDefault","message","value","userProfile","JSON","parse","localStorage","getItem","login","console","error","response","fetch","method","headers","ok","user","users","json","updatedNotifications","Array","isArray","notifications","updateResponse","body","stringify","fetchNotifications","reset","innerHTML","map","notification","index","join","addDeleteEventListeners","deleteButtons","querySelectorAll","forEach","button","dataset","filter","_","i","parseInt","handleCloseProfileModal","style","display","updateProfileButton","textContent","name","toUpperCase","surname","data","Object","fromEntries","formData","FormData","entries","alert"],"version":3,"file":"settings.fdbc0abc.js.map"}