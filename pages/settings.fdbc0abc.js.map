{"mappings":"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","sources":["<anon>","src/js/settings.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirecf3a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirecf3a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"6byIg\", function(module, exports) {\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const profileButton = document.querySelector(\"#profileCircle\");\n    const profileModal = document.querySelector(\"#profileModal\");\n    const notificationsModal = document.querySelector(\"#notificationsModal\");\n    const closeProfileModalButton = document.querySelector(\"#closeProfileModal\");\n    const closeNotificationsModalButton = document.querySelector(\"#closeNotificationsModal\");\n    const notificationsButton = document.querySelector(\"#notificationsButton\");\n    const settingsForm = document.querySelector(\"#settingsForm\");\n    const profileName = document.querySelector(\"#profileName\");\n    const notificationForm = document.querySelector(\"#notificationForm\");\n    const notificationsList = document.querySelector(\"#notificationsList\");\n    const handleNotificationSubmit = async (e)=>{\n        e.preventDefault();\n        const message = document.querySelector(\"#notificationMessage\").value;\n        const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n        const login = userProfile ? userProfile.login : null;\n        if (!login) {\n            console.error(\"User login is not available.\");\n            return;\n        }\n        try {\n            const response = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const users = await response.json();\n            const user = users[0];\n            // Ensure notifications is an array\n            const updatedNotifications = Array.isArray(user.notifications) ? [\n                ...user.notifications,\n                message\n            ] : [\n                message\n            ];\n            const updateResponse = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts/${user.id}`, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    ...user,\n                    notifications: updatedNotifications\n                })\n            });\n            if (!updateResponse.ok) throw new Error(\"Network response was not ok\");\n            await fetchNotifications();\n            if (notificationForm) notificationForm.reset();\n        } catch (error) {\n            console.error(\"Sending notification failed:\", error);\n        }\n    };\n    const fetchNotifications = async ()=>{\n        const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n        const login = userProfile ? userProfile.login : null;\n        if (!login) {\n            console.error(\"User login is not available.\");\n            return;\n        }\n        try {\n            const response = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`);\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const users = await response.json();\n            const notifications = users[0]?.notifications || [];\n            if (notificationsList) notificationsList.innerHTML = notifications.map((notification, index)=>`<div class=\"notification-item\">\n                        <p>${notification}</p>\n                        <button data-index=\"${index}\" class=\"delete-notification\">&times;</button>\n                    </div>`).join(\"\");\n            addDeleteEventListeners();\n        } catch (error) {\n            console.error(\"Fetching notifications failed:\", error);\n        }\n    };\n    const addDeleteEventListeners = ()=>{\n        const deleteButtons = document.querySelectorAll(\".delete-notification\");\n        deleteButtons.forEach((button)=>{\n            button.addEventListener(\"click\", async ()=>{\n                const index = button.dataset.index;\n                const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n                const login = userProfile ? userProfile.login : null;\n                if (!login) {\n                    console.error(\"User login is not available.\");\n                    return;\n                }\n                try {\n                    const response = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`, {\n                        method: \"GET\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        }\n                    });\n                    if (!response.ok) throw new Error(\"Network response was not ok\");\n                    const users = await response.json();\n                    const user = users[0];\n                    const updatedNotifications = user.notifications.filter((_, i)=>i !== parseInt(index, 10));\n                    const updateResponse = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts/${user.id}`, {\n                        method: \"PUT\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            ...user,\n                            notifications: updatedNotifications\n                        })\n                    });\n                    if (!updateResponse.ok) throw new Error(\"Network response was not ok\");\n                    await fetchNotifications();\n                } catch (error) {\n                    console.error(\"Deleting notification failed:\", error);\n                }\n            });\n        });\n    };\n    const handleProfileModalOpen = ()=>{\n        if (profileModal) profileModal.style.display = \"flex\";\n    };\n    const handleNotificationsModalOpen = ()=>{\n        if (notificationsModal) {\n            notificationsModal.style.display = \"flex\";\n            fetchNotifications(); // Загрузка уведомлений при открытии модального окна\n        }\n    };\n    const handleCloseProfileModal = ()=>{\n        if (profileModal) profileModal.style.display = \"none\";\n    };\n    const handleCloseNotificationsModal = ()=>{\n        if (notificationsModal) notificationsModal.style.display = \"none\";\n    };\n    const updateProfileButton = async ()=>{\n        const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n        const login = userProfile ? userProfile.login : null;\n        if (login) try {\n            const response = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`);\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const users = await response.json();\n            const user = users[0];\n            if (profileButton) {\n                profileButton.textContent = user.name[0].toUpperCase();\n                profileButton.style.display = \"flex\";\n            }\n            if (profileName) profileName.textContent = `${user.name} ${user.surname}`;\n        } catch (error) {\n            console.error(\"Fetching user profile failed:\", error);\n        }\n        else {\n            if (profileButton) profileButton.style.display = \"none\";\n            if (profileName) profileName.textContent = \"\\u0406\\u043C'\\u044F \\u043A\\u043E\\u0440\\u0438\\u0441\\u0442\\u0443\\u0432\\u0430\\u0447\\u0430\";\n        }\n    };\n    // Перевірка наявності елементів перед додаванням обробників подій\n    if (profileButton) profileButton.addEventListener(\"click\", handleProfileModalOpen);\n    if (closeProfileModalButton) closeProfileModalButton.addEventListener(\"click\", handleCloseProfileModal);\n    if (notificationsButton) notificationsButton.addEventListener(\"click\", handleNotificationsModalOpen);\n    if (closeNotificationsModalButton) closeNotificationsModalButton.addEventListener(\"click\", handleCloseNotificationsModal);\n    if (settingsForm) settingsForm.addEventListener(\"submit\", async (e)=>{\n        e.preventDefault();\n        const formData = new FormData(settingsForm);\n        const data = Object.fromEntries(formData.entries());\n        const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n        const login = userProfile ? userProfile.login : null;\n        if (!login) {\n            console.error(\"User login is not available.\");\n            return;\n        }\n        try {\n            const response = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`);\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const users = await response.json();\n            const user = users[0];\n            const updateResponse = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts/${user.id}`, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    ...user,\n                    ...data\n                })\n            });\n            if (!updateResponse.ok) throw new Error(\"Network response was not ok\");\n            alert(\"\\u041D\\u0430\\u043B\\u0430\\u0448\\u0442\\u0443\\u0432\\u0430\\u043D\\u043D\\u044F \\u0437\\u0431\\u0435\\u0440\\u0435\\u0436\\u0435\\u043D\\u043E\");\n            handleCloseProfileModal();\n        } catch (error) {\n            console.error(\"Updating profile failed:\", error);\n        }\n    });\n    if (notificationForm) notificationForm.addEventListener(\"submit\", handleNotificationSubmit);\n    updateProfileButton();\n});\n\n});\n\n\nparcelRequire(\"6byIg\");\n\n//# sourceMappingURL=settings.fdbc0abc.js.map\n","document.addEventListener(\"DOMContentLoaded\", () => {\n    const profileButton = document.querySelector(\"#profileCircle\");\n    const profileModal = document.querySelector(\"#profileModal\");\n    const notificationsModal = document.querySelector(\"#notificationsModal\");\n    const closeProfileModalButton = document.querySelector(\"#closeProfileModal\");\n    const closeNotificationsModalButton = document.querySelector(\"#closeNotificationsModal\");\n    const notificationsButton = document.querySelector(\"#notificationsButton\");\n    const settingsForm = document.querySelector(\"#settingsForm\");\n    const profileName = document.querySelector(\"#profileName\");\n    const notificationForm = document.querySelector(\"#notificationForm\");\n    const notificationsList = document.querySelector(\"#notificationsList\");\n\n    const handleNotificationSubmit = async (e) => {\n        e.preventDefault();\n        const message = document.querySelector(\"#notificationMessage\").value;\n        const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n        const login = userProfile ? userProfile.login : null;\n\n        if (!login) {\n            console.error('User login is not available.');\n            return;\n        }\n\n        try {\n            const response = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n            });\n            if (!response.ok) throw new Error('Network response was not ok');\n            const users = await response.json();\n            const user = users[0];\n\n            // Ensure notifications is an array\n            const updatedNotifications = Array.isArray(user.notifications) ? [...user.notifications, message] : [message];\n\n            const updateResponse = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts/${user.id}`, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    ...user,\n                    notifications: updatedNotifications\n                }),\n            });\n            if (!updateResponse.ok) throw new Error('Network response was not ok');\n\n            await fetchNotifications();\n            if (notificationForm) notificationForm.reset();\n        } catch (error) {\n            console.error('Sending notification failed:', error);\n        }\n    };\n\n    const fetchNotifications = async () => {\n        const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n        const login = userProfile ? userProfile.login : null;\n\n        if (!login) {\n            console.error('User login is not available.');\n            return;\n        }\n\n        try {\n            const response = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`);\n            if (!response.ok) throw new Error('Network response was not ok');\n            const users = await response.json();\n            const notifications = users[0]?.notifications || [];\n            if (notificationsList) {\n                notificationsList.innerHTML = notifications.map((notification, index) =>\n                    `<div class=\"notification-item\">\n                        <p>${notification}</p>\n                        <button data-index=\"${index}\" class=\"delete-notification\">&times;</button>\n                    </div>`\n                ).join('');\n            }\n            addDeleteEventListeners();\n        } catch (error) {\n            console.error('Fetching notifications failed:', error);\n        }\n    };\n\n    const addDeleteEventListeners = () => {\n        const deleteButtons = document.querySelectorAll(\".delete-notification\");\n        deleteButtons.forEach(button => {\n            button.addEventListener(\"click\", async () => {\n                const index = button.dataset.index;\n                const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n                const login = userProfile ? userProfile.login : null;\n\n                if (!login) {\n                    console.error('User login is not available.');\n                    return;\n                }\n\n                try {\n                    const response = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`, {\n                        method: \"GET\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        },\n                    });\n                    if (!response.ok) throw new Error('Network response was not ok');\n                    const users = await response.json();\n                    const user = users[0];\n\n                    const updatedNotifications = user.notifications.filter((_, i) => i !== parseInt(index, 10));\n\n                    const updateResponse = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts/${user.id}`, {\n                        method: \"PUT\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        },\n                        body: JSON.stringify({\n                            ...user,\n                            notifications: updatedNotifications\n                        }),\n                    });\n                    if (!updateResponse.ok) throw new Error('Network response was not ok');\n\n                    await fetchNotifications();\n                } catch (error) {\n                    console.error('Deleting notification failed:', error);\n                }\n            });\n        });\n    };\n\n    const handleProfileModalOpen = () => {\n        if (profileModal) profileModal.style.display = \"flex\";\n    };\n\n    const handleNotificationsModalOpen = () => {\n        if (notificationsModal) {\n            notificationsModal.style.display = \"flex\";\n            fetchNotifications(); // Загрузка уведомлений при открытии модального окна\n        }\n    };\n\n    const handleCloseProfileModal = () => {\n        if (profileModal) profileModal.style.display = \"none\";\n    };\n\n    const handleCloseNotificationsModal = () => {\n        if (notificationsModal) notificationsModal.style.display = \"none\";\n    };\n\n    const updateProfileButton = async () => {\n        const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n        const login = userProfile ? userProfile.login : null;\n\n        if (login) {\n            try {\n                const response = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`);\n                if (!response.ok) throw new Error('Network response was not ok');\n                const users = await response.json();\n                const user = users[0];\n                if (profileButton) {\n                    profileButton.textContent = user.name[0].toUpperCase();\n                    profileButton.style.display = \"flex\";\n                }\n                if (profileName) profileName.textContent = `${user.name} ${user.surname}`;\n            } catch (error) {\n                console.error('Fetching user profile failed:', error);\n            }\n        } else {\n            if (profileButton) profileButton.style.display = \"none\";\n            if (profileName) profileName.textContent = \"Ім'я користувача\";\n        }\n    };\n\n    // Перевірка наявності елементів перед додаванням обробників подій\n    if (profileButton) {\n        profileButton.addEventListener(\"click\", handleProfileModalOpen);\n    }\n\n    if (closeProfileModalButton) {\n        closeProfileModalButton.addEventListener(\"click\", handleCloseProfileModal);\n    }\n\n    if (notificationsButton) {\n        notificationsButton.addEventListener(\"click\", handleNotificationsModalOpen);\n    }\n\n    if (closeNotificationsModalButton) {\n        closeNotificationsModalButton.addEventListener(\"click\", handleCloseNotificationsModal);\n    }\n\n    if (settingsForm) {\n        settingsForm.addEventListener(\"submit\", async (e) => {\n            e.preventDefault();\n            const formData = new FormData(settingsForm);\n            const data = Object.fromEntries(formData.entries());\n            const userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\n            const login = userProfile ? userProfile.login : null;\n\n            if (!login) {\n                console.error('User login is not available.');\n                return;\n            }\n\n            try {\n                const response = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts?login=${login}`);\n                if (!response.ok) throw new Error('Network response was not ok');\n                const users = await response.json();\n                const user = users[0];\n\n                const updateResponse = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts/${user.id}`, {\n                    method: \"PUT\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({\n                        ...user,\n                        ...data\n                    }),\n                });\n                if (!updateResponse.ok) throw new Error('Network response was not ok');\n                alert(\"Налаштування збережено\");\n                handleCloseProfileModal();\n            } catch (error) {\n                console.error('Updating profile failed:', error);\n            }\n        });\n    }\n\n    if (notificationForm) {\n        notificationForm.addEventListener(\"submit\", handleNotificationSubmit);\n    }\n\n    updateProfileButton();\n});\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","document","addEventListener","profileButton","querySelector","profileModal","notificationsModal","closeProfileModalButton","closeNotificationsModalButton","notificationsButton","settingsForm","profileName","notificationForm","notificationsList","handleNotificationSubmit","e","preventDefault","message","value","userProfile","JSON","parse","localStorage","getItem","login","console","error","response","fetch","method","headers","ok","user","users","json","updatedNotifications","Array","isArray","notifications","updateResponse","body","stringify","fetchNotifications","reset","innerHTML","map","notification","index","join","addDeleteEventListeners","deleteButtons","querySelectorAll","forEach","button","dataset","filter","_","i","parseInt","handleCloseProfileModal","style","display","updateProfileButton","textContent","name","toUpperCase","surname","data","Object","fromEntries","formData","FormData","entries","alert"],"version":3,"file":"settings.fdbc0abc.js.map"}