{"mappings":"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","sources":["<anon>","src/index.js","src/js/home.js","src/js/profile/addProfile.js","src/js/profile/profileSystem.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirecf3a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirecf3a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const modals = {\n        register: document.querySelector(\".register__modal\"),\n        login: document.querySelector(\".login__modal\"),\n        adminRequest: document.querySelector(\"#adminRequestModal\")\n    };\n    const buttons = {\n        register: document.querySelector(\".regButton\"),\n        login: document.querySelector(\".logButton\"),\n        adminRequest: document.querySelector(\".work__send__btn\")\n    };\n    const closeButtons = {\n        register: modals.register.querySelector(\".cross__svg\"),\n        login: modals.login.querySelector(\".cross__svg\"),\n        adminRequest: modals.adminRequest.querySelector(\".cross__svg\")\n    };\n    const openModal = (modal)=>{\n        modal.classList.remove(\"change__invisible\");\n    };\n    const closeModal = (modal)=>{\n        modal.classList.add(\"change__invisible\");\n    };\n    const setupModalEvent = (modal, openButton, closeButton)=>{\n        openButton.addEventListener(\"click\", ()=>{\n            openModal(modal);\n        });\n        closeButton.addEventListener(\"click\", ()=>{\n            closeModal(modal);\n        });\n        modal.addEventListener(\"click\", (e)=>{\n            if (e.target === modal) closeModal(modal);\n        });\n        document.addEventListener(\"keydown\", (e)=>{\n            if (e.key === \"Escape\" && !modal.classList.contains(\"change__invisible\")) closeModal(modal);\n        });\n    };\n    setupModalEvent(modals.register, buttons.register, closeButtons.register);\n    setupModalEvent(modals.login, buttons.login, closeButtons.login);\n    setupModalEvent(modals.adminRequest, buttons.adminRequest, closeButtons.adminRequest);\n    const submitAdminRequestButton = document.querySelector(\"#submitAdminRequest\");\n    const adminConfirmationInput = document.querySelector(\"#adminConfirmation\");\n    const userNameElement = document.querySelector(\"#userName\");\n    submitAdminRequestButton.addEventListener(\"click\", async ()=>{\n        const confirmationText = adminConfirmationInput.value.trim().toLowerCase();\n        if (confirmationText === \"\\u0442\\u0430\\u043A\") {\n            const user = JSON.parse(localStorage.getItem(\"userProfile\"));\n            if (user && user.login) try {\n                const response = await fetch(\"https://669a78899ba098ed61ffc5a3.mockapi.io/accounts\");\n                const users = await response.json();\n                const userToUpdate = users.find((u)=>u.login === user.login);\n                if (userToUpdate) {\n                    const updateResponse = await fetch(`https://669a78899ba098ed61ffc5a3.mockapi.io/accounts/${userToUpdate.id}`, {\n                        method: \"PUT\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            ...userToUpdate,\n                            admin: true\n                        })\n                    });\n                    if (updateResponse.ok) {\n                        alert(\"\\u0412\\u0438 \\u0441\\u0442\\u0430\\u043B\\u0438 \\u0430\\u0434\\u043C\\u0456\\u043D\\u0456\\u0441\\u0442\\u0440\\u0430\\u0442\\u043E\\u0440\\u043E\\u043C!\");\n                        closeModal(modals.adminRequest);\n                    } else {\n                        const errorData = await updateResponse.json();\n                        console.error(`Error ${updateResponse.status}: ${errorData.message}`);\n                        alert(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043E\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u043D\\u0456. \\u0421\\u043F\\u0440\\u043E\\u0431\\u0443\\u0439\\u0442\\u0435 \\u0449\\u0435 \\u0440\\u0430\\u0437.\");\n                    }\n                } else alert(\"\\u041A\\u043E\\u0440\\u0438\\u0441\\u0442\\u0443\\u0432\\u0430\\u0447\\u0430 \\u043D\\u0435 \\u0437\\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E.\");\n            } catch (error) {\n                console.error(\"Error:\", error);\n                alert(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043E\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u043D\\u0456. \\u0421\\u043F\\u0440\\u043E\\u0431\\u0443\\u0439\\u0442\\u0435 \\u0449\\u0435 \\u0440\\u0430\\u0437.\");\n            }\n            else alert(\"\\u0412\\u0438 \\u043D\\u0435 \\u0443\\u0432\\u0456\\u0439\\u0448\\u043B\\u0438 \\u0432 \\u0441\\u0438\\u0441\\u0442\\u0435\\u043C\\u0443.\");\n        } else alert(\"\\u0412\\u0432\\u0435\\u0434\\u0456\\u0442\\u044C '\\u0442\\u0430\\u043A', \\u0449\\u043E\\u0431 \\u043F\\u0456\\u0434\\u0442\\u0432\\u0435\\u0440\\u0434\\u0438\\u0442\\u0438.\");\n    });\n});\n\n\nconst $b13e113f41dde6f0$var$baseURL = \"https://669a78899ba098ed61ffc5a3.mockapi.io/accounts\";\nconst $b13e113f41dde6f0$export$32da561ec87acb84 = async (profile)=>{\n    try {\n        const response = await fetch($b13e113f41dde6f0$var$baseURL, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(profile)\n        });\n        if (!response.ok) throw new Error(\"Network response was not ok\");\n        return await response.json();\n    } catch (error) {\n        throw new Error(`Registration failed: ${error.message}`);\n    }\n};\nconst $b13e113f41dde6f0$export$585c1c8d79d3e628 = async ()=>{\n    try {\n        const response = await fetch($b13e113f41dde6f0$var$baseURL);\n        if (!response.ok) throw new Error(\"Network response was not ok\");\n        return await response.json();\n    } catch (error) {\n        throw new Error(`Failed to fetch profiles: ${error.message}`);\n    }\n};\n\n\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const profileCircle = document.querySelector(\".profile__circle\");\n    const regButton = document.querySelector(\".regButton\");\n    const logButton = document.querySelector(\".logButton\");\n    const logoutButton = document.querySelector(\"#logout-button\");\n    const boardLink = document.querySelector(\"#board-link\");\n    const registerForm = document.querySelector(\".register__form\");\n    const loginForm = document.querySelector(\".login__form\");\n    const loginErrorMessage = loginForm ? loginForm.querySelector(\".error-message\") : null;\n    const registerErrorMessage = registerForm ? registerForm.querySelector(\".error-message\") : null;\n    const registerModal = document.querySelector(\".register__modal\");\n    const loginModal = document.querySelector(\".login__modal\");\n    const tryButton = document.querySelector(\".tryButton\");\n    const updateUI = ()=>{\n        const userProfile = localStorage.getItem(\"userProfile\");\n        if (profileCircle) {\n            if (userProfile) {\n                profileCircle.classList.remove(\"change__invisible\");\n                if (logoutButton) logoutButton.classList.remove(\"change__invisible\");\n                if (boardLink) boardLink.classList.remove(\"change__invisible\");\n                if (regButton) regButton.classList.add(\"change__invisible\");\n                if (logButton) logButton.classList.add(\"change__invisible\");\n                const user = JSON.parse(userProfile);\n                profileCircle.textContent = user.name[0].toUpperCase();\n            } else {\n                profileCircle.classList.add(\"change__invisible\");\n                if (logoutButton) logoutButton.classList.add(\"change__invisible\");\n                if (boardLink) boardLink.classList.add(\"change__invisible\");\n                if (regButton) regButton.classList.remove(\"change__invisible\");\n                if (logButton) logButton.classList.remove(\"change__invisible\");\n            }\n        }\n    };\n    const isLoginTaken = async (login)=>{\n        try {\n            const profiles = await (0, $b13e113f41dde6f0$export$585c1c8d79d3e628)();\n            return profiles.some((profile)=>profile.login === login);\n        } catch (error) {\n            console.error(\"Failed to check login availability:\", error);\n            return false;\n        }\n    };\n    updateUI();\n    if (registerForm) registerForm.addEventListener(\"submit\", async (e)=>{\n        e.preventDefault();\n        if (registerErrorMessage) registerErrorMessage.textContent = \"\";\n        const profilename = e.target.elements.profilename.value;\n        const profilesurname = e.target.elements.profilesurname.value;\n        const profilelogin = e.target.elements.profilelogin.value;\n        const profilepassword = e.target.elements.profilepassword.value;\n        if (!profilename || !profilesurname || !profilelogin || !profilepassword) {\n            if (registerErrorMessage) registerErrorMessage.textContent = \"Please fill in all fields\";\n            return;\n        }\n        if (await isLoginTaken(profilelogin)) {\n            if (registerErrorMessage) registerErrorMessage.textContent = \"Login is already taken. Please choose another one.\";\n            return;\n        }\n        const profile = {\n            name: profilename,\n            surname: profilesurname,\n            login: profilelogin,\n            password: profilepassword\n        };\n        try {\n            await (0, $b13e113f41dde6f0$export$32da561ec87acb84)(profile);\n            localStorage.setItem(\"userProfile\", JSON.stringify(profile));\n            updateUI();\n            if (registerModal) registerModal.classList.add(\"change__invisible\");\n        } catch (error) {\n            if (registerErrorMessage) registerErrorMessage.textContent = \"Registration failed. Please try again.\";\n            console.error(\"Registration failed:\", error);\n        }\n    });\n    if (loginForm) loginForm.addEventListener(\"submit\", async (e)=>{\n        e.preventDefault();\n        if (loginErrorMessage) loginErrorMessage.textContent = \"\";\n        const profilelogin = e.target.elements.profilelogin.value;\n        const profilepassword = e.target.elements.profilepassword.value;\n        if (!profilelogin || !profilepassword) {\n            if (loginErrorMessage) loginErrorMessage.textContent = \"Please fill in all fields\";\n            return;\n        }\n        try {\n            const profiles = await (0, $b13e113f41dde6f0$export$585c1c8d79d3e628)();\n            const user = profiles.find((profile)=>profile.login === profilelogin && profile.password === profilepassword);\n            if (user) {\n                localStorage.setItem(\"userProfile\", JSON.stringify(user));\n                updateUI();\n                if (loginModal) loginModal.classList.add(\"change__invisible\");\n            } else if (loginErrorMessage) loginErrorMessage.textContent = \"Invalid login or password. Please try again.\";\n        } catch (error) {\n            if (loginErrorMessage) loginErrorMessage.textContent = \"Login failed. Please try again.\";\n            console.error(\"Login failed:\", error);\n        }\n    });\n    if (logoutButton) logoutButton.addEventListener(\"click\", ()=>{\n        localStorage.removeItem(\"userProfile\");\n        updateUI();\n    });\n    if (regButton) regButton.addEventListener(\"click\", ()=>{\n        if (registerModal) registerModal.classList.remove(\"change__invisible\");\n    });\n    if (logButton) logButton.addEventListener(\"click\", ()=>{\n        if (loginModal) loginModal.classList.remove(\"change__invisible\");\n    });\n    if (tryButton) tryButton.addEventListener(\"click\", ()=>{\n        if (registerModal) registerModal.classList.remove(\"change__invisible\");\n    });\n    const closeModal = (modal)=>{\n        if (modal) modal.classList.add(\"change__invisible\");\n    };\n    const modalCloseButtons = document.querySelectorAll(\".modal__close\");\n    modalCloseButtons.forEach((button)=>{\n        button.addEventListener(\"click\", ()=>{\n            const modal = button.closest(\".modal\");\n            closeModal(modal);\n        });\n    });\n    const modalBackgrounds = document.querySelectorAll(\".modal-background\");\n    modalBackgrounds.forEach((background)=>{\n        background.addEventListener(\"click\", (e)=>{\n            if (e.target === background) {\n                const modal = e.target.closest(\".modal\");\n                if (modal) closeModal(modal);\n            }\n        });\n    });\n});\n\n\n\nparcelRequire(\"6byIg\");\n\n\n//# sourceMappingURL=index.a36b7cb8.js.map\n","import \"./js/home.js\";\nimport \"./js/profile/addProfile.js\";\nimport \"./js/profile/profileSystem.js\";\nimport \"./js/settings.js\";\n\n","document.addEventListener(\"DOMContentLoaded\", () => {\n  const modals = {\n    register: document.querySelector(\".register__modal\"),\n    login: document.querySelector(\".login__modal\"),\n    adminRequest: document.querySelector(\"#adminRequestModal\"),\n  };\n\n  const buttons = {\n    register: document.querySelector(\".regButton\"),\n    login: document.querySelector(\".logButton\"),\n    adminRequest: document.querySelector(\".work__send__btn\"),\n  };\n\n  const closeButtons = {\n    register: modals.register.querySelector(\".cross__svg\"),\n    login: modals.login.querySelector(\".cross__svg\"),\n    adminRequest: modals.adminRequest.querySelector(\".cross__svg\"),\n  };\n\n  const openModal = (modal) => {\n    modal.classList.remove(\"change__invisible\");\n  };\n\n  const closeModal = (modal) => {\n    modal.classList.add(\"change__invisible\");\n  };\n\n  const setupModalEvent = (modal, openButton, closeButton) => {\n    openButton.addEventListener(\"click\", () => {\n      openModal(modal);\n    });\n\n    closeButton.addEventListener(\"click\", () => {\n      closeModal(modal);\n    });\n\n    modal.addEventListener(\"click\", (e) => {\n      if (e.target === modal) {\n        closeModal(modal);\n      }\n    });\n\n    document.addEventListener(\"keydown\", (e) => {\n      if (\n        e.key === \"Escape\" &&\n        !modal.classList.contains(\"change__invisible\")\n      ) {\n        closeModal(modal);\n      }\n    });\n  };\n\n  setupModalEvent(modals.register, buttons.register, closeButtons.register);\n  setupModalEvent(modals.login, buttons.login, closeButtons.login);\n  setupModalEvent(\n    modals.adminRequest,\n    buttons.adminRequest,\n    closeButtons.adminRequest\n  );\n\n  const submitAdminRequestButton = document.querySelector(\n    \"#submitAdminRequest\"\n  );\n  const adminConfirmationInput = document.querySelector(\"#adminConfirmation\");\n  const userNameElement = document.querySelector(\"#userName\");\n\n  submitAdminRequestButton.addEventListener(\"click\", async () => {\n    const confirmationText = adminConfirmationInput.value.trim().toLowerCase();\n    if (confirmationText === \"так\") {\n      const user = JSON.parse(localStorage.getItem(\"userProfile\"));\n      if (user && user.login) {\n        try {\n          const response = await fetch(\n            \"https://669a78899ba098ed61ffc5a3.mockapi.io/accounts\"\n          );\n          const users = await response.json();\n\n          const userToUpdate = users.find((u) => u.login === user.login);\n\n          if (userToUpdate) {\n            const updateResponse = await fetch(\n              `https://669a78899ba098ed61ffc5a3.mockapi.io/accounts/${userToUpdate.id}`,\n              {\n                method: \"PUT\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ ...userToUpdate, admin: true }),\n              }\n            );\n\n            if (updateResponse.ok) {\n              alert(\"Ви стали адміністратором!\");\n              closeModal(modals.adminRequest);\n            } else {\n              const errorData = await updateResponse.json();\n              console.error(\n                `Error ${updateResponse.status}: ${errorData.message}`\n              );\n              alert(\"Помилка при оновленні. Спробуйте ще раз.\");\n            }\n          } else {\n            alert(\"Користувача не знайдено.\");\n          }\n        } catch (error) {\n          console.error(\"Error:\", error);\n          alert(\"Помилка при оновленні. Спробуйте ще раз.\");\n        }\n      } else {\n        alert(\"Ви не увійшли в систему.\");\n      }\n    } else {\n      alert(\"Введіть 'так', щоб підтвердити.\");\n    }\n  });\n});\n","import { getProfiles, addProfile } from \"./profileSystem\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const profileCircle = document.querySelector(\".profile__circle\");\n  const regButton = document.querySelector(\".regButton\");\n  const logButton = document.querySelector(\".logButton\");\n  const logoutButton = document.querySelector(\"#logout-button\");\n  const boardLink = document.querySelector(\"#board-link\");\n  const registerForm = document.querySelector(\".register__form\");\n  const loginForm = document.querySelector(\".login__form\");\n  const loginErrorMessage = loginForm\n    ? loginForm.querySelector(\".error-message\")\n    : null;\n  const registerErrorMessage = registerForm\n    ? registerForm.querySelector(\".error-message\")\n    : null;\n  const registerModal = document.querySelector(\".register__modal\");\n  const loginModal = document.querySelector(\".login__modal\");\n  const tryButton = document.querySelector(\".tryButton\");\n  const updateUI = () => {\n    const userProfile = localStorage.getItem(\"userProfile\");\n\n    if (profileCircle) {\n      if (userProfile) {\n        profileCircle.classList.remove(\"change__invisible\");\n        if (logoutButton) logoutButton.classList.remove(\"change__invisible\");\n        if (boardLink) boardLink.classList.remove(\"change__invisible\");\n        if (regButton) regButton.classList.add(\"change__invisible\");\n        if (logButton) logButton.classList.add(\"change__invisible\");\n\n        const user = JSON.parse(userProfile);\n        profileCircle.textContent = user.name[0].toUpperCase();\n      } else {\n        profileCircle.classList.add(\"change__invisible\");\n        if (logoutButton) logoutButton.classList.add(\"change__invisible\");\n        if (boardLink) boardLink.classList.add(\"change__invisible\");\n        if (regButton) regButton.classList.remove(\"change__invisible\");\n        if (logButton) logButton.classList.remove(\"change__invisible\");\n      }\n    }\n  };\n\n  const isLoginTaken = async (login) => {\n    try {\n      const profiles = await getProfiles();\n      return profiles.some((profile) => profile.login === login);\n    } catch (error) {\n      console.error(\"Failed to check login availability:\", error);\n      return false;\n    }\n  };\n\n  updateUI();\n\n  if (registerForm) {\n    registerForm.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n      if (registerErrorMessage) registerErrorMessage.textContent = \"\";\n\n      const profilename = e.target.elements.profilename.value;\n      const profilesurname = e.target.elements.profilesurname.value;\n      const profilelogin = e.target.elements.profilelogin.value;\n      const profilepassword = e.target.elements.profilepassword.value;\n\n      if (\n        !profilename ||\n        !profilesurname ||\n        !profilelogin ||\n        !profilepassword\n      ) {\n        if (registerErrorMessage)\n          registerErrorMessage.textContent = \"Please fill in all fields\";\n        return;\n      }\n\n      if (await isLoginTaken(profilelogin)) {\n        if (registerErrorMessage)\n          registerErrorMessage.textContent =\n            \"Login is already taken. Please choose another one.\";\n        return;\n      }\n\n      const profile = {\n        name: profilename,\n        surname: profilesurname,\n        login: profilelogin,\n        password: profilepassword,\n      };\n\n      try {\n        await addProfile(profile);\n        localStorage.setItem(\"userProfile\", JSON.stringify(profile));\n        updateUI();\n        if (registerModal) registerModal.classList.add(\"change__invisible\");\n      } catch (error) {\n        if (registerErrorMessage)\n          registerErrorMessage.textContent =\n            \"Registration failed. Please try again.\";\n        console.error(\"Registration failed:\", error);\n      }\n    });\n  }\n\n  if (loginForm) {\n    loginForm.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n      if (loginErrorMessage) loginErrorMessage.textContent = \"\";\n\n      const profilelogin = e.target.elements.profilelogin.value;\n      const profilepassword = e.target.elements.profilepassword.value;\n\n      if (!profilelogin || !profilepassword) {\n        if (loginErrorMessage)\n          loginErrorMessage.textContent = \"Please fill in all fields\";\n        return;\n      }\n\n      try {\n        const profiles = await getProfiles();\n        const user = profiles.find(\n          (profile) =>\n            profile.login === profilelogin &&\n            profile.password === profilepassword\n        );\n\n        if (user) {\n          localStorage.setItem(\"userProfile\", JSON.stringify(user));\n          updateUI();\n          if (loginModal) loginModal.classList.add(\"change__invisible\");\n        } else {\n          if (loginErrorMessage)\n            loginErrorMessage.textContent =\n              \"Invalid login or password. Please try again.\";\n        }\n      } catch (error) {\n        if (loginErrorMessage)\n          loginErrorMessage.textContent = \"Login failed. Please try again.\";\n        console.error(\"Login failed:\", error);\n      }\n    });\n  }\n\n  if (logoutButton) {\n    logoutButton.addEventListener(\"click\", () => {\n      localStorage.removeItem(\"userProfile\");\n      updateUI();\n    });\n  }\n\n  if (regButton) {\n    regButton.addEventListener(\"click\", () => {\n      if (registerModal) registerModal.classList.remove(\"change__invisible\");\n    });\n  }\n\n  if (logButton) {\n    logButton.addEventListener(\"click\", () => {\n      if (loginModal) loginModal.classList.remove(\"change__invisible\");\n    });\n  }\n\n  if (tryButton) {\n    tryButton.addEventListener(\"click\", () => {\n      if (registerModal) registerModal.classList.remove(\"change__invisible\");\n    });\n  }\n\n  const closeModal = (modal) => {\n    if (modal) modal.classList.add(\"change__invisible\");\n  };\n\n  const modalCloseButtons = document.querySelectorAll(\".modal__close\");\n  modalCloseButtons.forEach((button) => {\n    button.addEventListener(\"click\", () => {\n      const modal = button.closest(\".modal\");\n      closeModal(modal);\n    });\n  });\n\n  const modalBackgrounds = document.querySelectorAll(\".modal-background\");\n  modalBackgrounds.forEach((background) => {\n    background.addEventListener(\"click\", (e) => {\n      if (e.target === background) {\n        const modal = e.target.closest(\".modal\");\n        if (modal) closeModal(modal);\n      }\n    });\n  });\n});\n","const baseURL = \"https://669a78899ba098ed61ffc5a3.mockapi.io/accounts\";\n\nexport const addProfile = async (profile) => {\n  try {\n    const response = await fetch(baseURL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(profile),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(`Registration failed: ${error.message}`);\n  }\n};\n\nexport const getProfiles = async () => {\n  try {\n    const response = await fetch(baseURL);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(`Failed to fetch profiles: ${error.message}`);\n  }\n};\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","document","addEventListener","modals","querySelector","login","adminRequest","buttons","closeButtons","openModal","modal","classList","remove","closeModal","add","setupModalEvent","openButton","closeButton","e","target","key","contains","submitAdminRequestButton","adminConfirmationInput","confirmationText","value","trim","toLowerCase","user","JSON","parse","localStorage","getItem","response","fetch","userToUpdate","users","json","find","u","updateResponse","method","headers","body","stringify","admin","ok","alert","errorData","console","error","status","message","$b13e113f41dde6f0$var$baseURL","$b13e113f41dde6f0$export$32da561ec87acb84","profile","$b13e113f41dde6f0$export$585c1c8d79d3e628","profileCircle","regButton","logButton","logoutButton","boardLink","registerForm","loginForm","loginErrorMessage","registerErrorMessage","registerModal","loginModal","tryButton","updateUI","userProfile","textContent","name","toUpperCase","isLoginTaken","profiles","some","preventDefault","profilename","elements","profilesurname","profilelogin","profilepassword","surname","password","setItem","removeItem","modalCloseButtons","querySelectorAll","forEach","button","closest","modalBackgrounds","background"],"version":3,"file":"index.a36b7cb8.js.map"}